// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto;
namespace yyy {
class data;
struct dataDefaultTypeInternal;
extern dataDefaultTypeInternal _data_default_instance_;
}  // namespace yyy
PROTOBUF_NAMESPACE_OPEN
template<> ::yyy::data* Arena::CreateMaybeMessage<::yyy::data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace yyy {

// ===================================================================

class data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yyy.data) */ {
 public:
  inline data() : data(nullptr) {}
  ~data() override;
  explicit PROTOBUF_CONSTEXPR data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  data(const data& from);
  data(data&& from) noexcept
    : data() {
    *this = ::std::move(from);
  }

  inline data& operator=(const data& from) {
    CopyFrom(from);
    return *this;
  }
  inline data& operator=(data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const data& default_instance() {
    return *internal_default_instance();
  }
  static inline const data* internal_default_instance() {
    return reinterpret_cast<const data*>(
               &_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(data& a, data& b) {
    a.Swap(&b);
  }
  inline void Swap(data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const data& from) {
    data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yyy.data";
  }
  protected:
  explicit data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRoleDataFieldNumber = 7,
    kAgeFieldNumber = 1,
    kSexFieldNumber = 3,
    kMoneyFieldNumber = 4,
    kCrcFieldNumber = 6,
    kBackMoneyFieldNumber = 5,
    kHpFieldNumber = 8,
    kManaFieldNumber = 9,
    kOutputStreamFieldNumber = 11,
    kInputStreamFieldNumber = 10,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes role_data = 7;
  void clear_role_data();
  const std::string& role_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_data();
  PROTOBUF_NODISCARD std::string* release_role_data();
  void set_allocated_role_data(std::string* role_data);
  private:
  const std::string& _internal_role_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_data(const std::string& value);
  std::string* _internal_mutable_role_data();
  public:

  // int32 age = 1;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // bool sex = 3;
  void clear_sex();
  bool sex() const;
  void set_sex(bool value);
  private:
  bool _internal_sex() const;
  void _internal_set_sex(bool value);
  public:

  // int64 money = 4;
  void clear_money();
  int64_t money() const;
  void set_money(int64_t value);
  private:
  int64_t _internal_money() const;
  void _internal_set_money(int64_t value);
  public:

  // uint64 crc = 6;
  void clear_crc();
  uint64_t crc() const;
  void set_crc(uint64_t value);
  private:
  uint64_t _internal_crc() const;
  void _internal_set_crc(uint64_t value);
  public:

  // uint32 back_money = 5;
  void clear_back_money();
  uint32_t back_money() const;
  void set_back_money(uint32_t value);
  private:
  uint32_t _internal_back_money() const;
  void _internal_set_back_money(uint32_t value);
  public:

  // float hp = 8;
  void clear_hp();
  float hp() const;
  void set_hp(float value);
  private:
  float _internal_hp() const;
  void _internal_set_hp(float value);
  public:

  // double mana = 9;
  void clear_mana();
  double mana() const;
  void set_mana(double value);
  private:
  double _internal_mana() const;
  void _internal_set_mana(double value);
  public:

  // fixed64 output_stream = 11;
  void clear_output_stream();
  uint64_t output_stream() const;
  void set_output_stream(uint64_t value);
  private:
  uint64_t _internal_output_stream() const;
  void _internal_set_output_stream(uint64_t value);
  public:

  // fixed32 input_stream = 10;
  void clear_input_stream();
  uint32_t input_stream() const;
  void set_input_stream(uint32_t value);
  private:
  uint32_t _internal_input_stream() const;
  void _internal_set_input_stream(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:yyy.data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_data_;
    int32_t age_;
    bool sex_;
    int64_t money_;
    uint64_t crc_;
    uint32_t back_money_;
    float hp_;
    double mana_;
    uint64_t output_stream_;
    uint32_t input_stream_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// data

// int32 age = 1;
inline void data::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t data::_internal_age() const {
  return _impl_.age_;
}
inline int32_t data::age() const {
  // @@protoc_insertion_point(field_get:yyy.data.age)
  return _internal_age();
}
inline void data::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void data::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:yyy.data.age)
}

// string name = 2;
inline void data::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& data::name() const {
  // @@protoc_insertion_point(field_get:yyy.data.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void data::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yyy.data.name)
}
inline std::string* data::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:yyy.data.name)
  return _s;
}
inline const std::string& data::_internal_name() const {
  return _impl_.name_.Get();
}
inline void data::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* data::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* data::release_name() {
  // @@protoc_insertion_point(field_release:yyy.data.name)
  return _impl_.name_.Release();
}
inline void data::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yyy.data.name)
}

// bool sex = 3;
inline void data::clear_sex() {
  _impl_.sex_ = false;
}
inline bool data::_internal_sex() const {
  return _impl_.sex_;
}
inline bool data::sex() const {
  // @@protoc_insertion_point(field_get:yyy.data.sex)
  return _internal_sex();
}
inline void data::_internal_set_sex(bool value) {
  
  _impl_.sex_ = value;
}
inline void data::set_sex(bool value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:yyy.data.sex)
}

// int64 money = 4;
inline void data::clear_money() {
  _impl_.money_ = int64_t{0};
}
inline int64_t data::_internal_money() const {
  return _impl_.money_;
}
inline int64_t data::money() const {
  // @@protoc_insertion_point(field_get:yyy.data.money)
  return _internal_money();
}
inline void data::_internal_set_money(int64_t value) {
  
  _impl_.money_ = value;
}
inline void data::set_money(int64_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:yyy.data.money)
}

// uint32 back_money = 5;
inline void data::clear_back_money() {
  _impl_.back_money_ = 0u;
}
inline uint32_t data::_internal_back_money() const {
  return _impl_.back_money_;
}
inline uint32_t data::back_money() const {
  // @@protoc_insertion_point(field_get:yyy.data.back_money)
  return _internal_back_money();
}
inline void data::_internal_set_back_money(uint32_t value) {
  
  _impl_.back_money_ = value;
}
inline void data::set_back_money(uint32_t value) {
  _internal_set_back_money(value);
  // @@protoc_insertion_point(field_set:yyy.data.back_money)
}

// uint64 crc = 6;
inline void data::clear_crc() {
  _impl_.crc_ = uint64_t{0u};
}
inline uint64_t data::_internal_crc() const {
  return _impl_.crc_;
}
inline uint64_t data::crc() const {
  // @@protoc_insertion_point(field_get:yyy.data.crc)
  return _internal_crc();
}
inline void data::_internal_set_crc(uint64_t value) {
  
  _impl_.crc_ = value;
}
inline void data::set_crc(uint64_t value) {
  _internal_set_crc(value);
  // @@protoc_insertion_point(field_set:yyy.data.crc)
}

// bytes role_data = 7;
inline void data::clear_role_data() {
  _impl_.role_data_.ClearToEmpty();
}
inline const std::string& data::role_data() const {
  // @@protoc_insertion_point(field_get:yyy.data.role_data)
  return _internal_role_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void data::set_role_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yyy.data.role_data)
}
inline std::string* data::mutable_role_data() {
  std::string* _s = _internal_mutable_role_data();
  // @@protoc_insertion_point(field_mutable:yyy.data.role_data)
  return _s;
}
inline const std::string& data::_internal_role_data() const {
  return _impl_.role_data_.Get();
}
inline void data::_internal_set_role_data(const std::string& value) {
  
  _impl_.role_data_.Set(value, GetArenaForAllocation());
}
inline std::string* data::_internal_mutable_role_data() {
  
  return _impl_.role_data_.Mutable(GetArenaForAllocation());
}
inline std::string* data::release_role_data() {
  // @@protoc_insertion_point(field_release:yyy.data.role_data)
  return _impl_.role_data_.Release();
}
inline void data::set_allocated_role_data(std::string* role_data) {
  if (role_data != nullptr) {
    
  } else {
    
  }
  _impl_.role_data_.SetAllocated(role_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_data_.IsDefault()) {
    _impl_.role_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yyy.data.role_data)
}

// float hp = 8;
inline void data::clear_hp() {
  _impl_.hp_ = 0;
}
inline float data::_internal_hp() const {
  return _impl_.hp_;
}
inline float data::hp() const {
  // @@protoc_insertion_point(field_get:yyy.data.hp)
  return _internal_hp();
}
inline void data::_internal_set_hp(float value) {
  
  _impl_.hp_ = value;
}
inline void data::set_hp(float value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:yyy.data.hp)
}

// double mana = 9;
inline void data::clear_mana() {
  _impl_.mana_ = 0;
}
inline double data::_internal_mana() const {
  return _impl_.mana_;
}
inline double data::mana() const {
  // @@protoc_insertion_point(field_get:yyy.data.mana)
  return _internal_mana();
}
inline void data::_internal_set_mana(double value) {
  
  _impl_.mana_ = value;
}
inline void data::set_mana(double value) {
  _internal_set_mana(value);
  // @@protoc_insertion_point(field_set:yyy.data.mana)
}

// fixed32 input_stream = 10;
inline void data::clear_input_stream() {
  _impl_.input_stream_ = 0u;
}
inline uint32_t data::_internal_input_stream() const {
  return _impl_.input_stream_;
}
inline uint32_t data::input_stream() const {
  // @@protoc_insertion_point(field_get:yyy.data.input_stream)
  return _internal_input_stream();
}
inline void data::_internal_set_input_stream(uint32_t value) {
  
  _impl_.input_stream_ = value;
}
inline void data::set_input_stream(uint32_t value) {
  _internal_set_input_stream(value);
  // @@protoc_insertion_point(field_set:yyy.data.input_stream)
}

// fixed64 output_stream = 11;
inline void data::clear_output_stream() {
  _impl_.output_stream_ = uint64_t{0u};
}
inline uint64_t data::_internal_output_stream() const {
  return _impl_.output_stream_;
}
inline uint64_t data::output_stream() const {
  // @@protoc_insertion_point(field_get:yyy.data.output_stream)
  return _internal_output_stream();
}
inline void data::_internal_set_output_stream(uint64_t value) {
  
  _impl_.output_stream_ = value;
}
inline void data::set_output_stream(uint64_t value) {
  _internal_set_output_stream(value);
  // @@protoc_insertion_point(field_set:yyy.data.output_stream)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace yyy

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto
